// das cube
$size: 8px;

// animation
$easing: cubic-bezier(0.455, 0.03, 0.515, 0.955);
$rotateX: 30deg;
$rotateY: 15deg;
$scale: 1.5;
$speed: 0.75s;
$stagger: 0.1s;
$verticalMovement: 40px;

/* Replace SCSS variables with CSS variables */

:root {
  --size: 8px;
  --easing: cubic-bezier(0.455, 0.03, 0.515, 0.955);
  --speed: 0.666s;
  --scale: 1.5;
  --rotateX: 30deg;
  --rotateY: 15deg;
  --verticalMovement: 35px;
  --stagger: 0.05s;
  --green: #{$green};
  --blue: #{$blue};
  --purple: #{$purple};
  --red: #{$red};
  --yellow: #{$yellow};
}

/* Simplify and convert SCSS to CSS */
#loader {
  position: absolute;
  height: calc(var(--size) * 2);
  width: auto;
  margin: 0 auto;
  left: 50%;
  top: 50%;
  transform: translateX(-50%) translateY(-50%);
  perspective: 50vw;
  text-align: center;
  transition: 0.3s ease-in-out;
}

.cube {
  height: calc(var(--size) * 2);
  width: calc(var(--size) * 2);
  display: inline-block;
  position: relative;
  margin: 0 calc(var(--size) * 2);
  transform-origin: 50% 50%;
  transform-style: preserve-3d;
  animation: bouncer var(--easing) var(--speed) infinite alternate;
}

.side {
  position: absolute;
  display: block;
  height: calc(var(--size) * 2);
  width: calc(var(--size) * 2);
}

/* Keyframes */
@keyframes bouncer {
  from {
  }
  to {
    transform: scale(var(--scale)) rotateX(var(--rotateX))
      rotateY(var(--rotateY)) translateY(calc(-1 * var(--verticalMovement)))
      translateZ(var(--size));
  }
}
